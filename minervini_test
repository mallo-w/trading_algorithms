"""
Created on Mon Jun 10 00:49:13 2024

@author: mallo

"""

import requests
import pandas as pd
import datetime
import time
from pprint import pprint
from collections import OrderedDict
import streamlit as st
import base64
from yahoo_fin import stock_info as si  # Import yahoo_fin library

# Set your API key
api_key = 'lg0Ac0SKhk44RhMPB2a7Bp0ANg3eI8nl'

def period(days=365):
    '''
    return start and end dates
    '''
    start_date = datetime.datetime.now() - datetime.timedelta(days=days)
    end_date = datetime.date.today()
    return start_date, end_date 

def calc_relative_strength(df):
    ## relative gain and losses
    df['close_shift'] = df['adj_close'].shift(1)
    ## Gains (true) and Losses (False)
    df['gains'] = df.apply(lambda x: x['adj_close'] if x['adj_close'] >= x['close_shift'] else 0, axis=1)
    df['loss'] = df.apply(lambda x: x['adj_close'] if x['adj_close'] <= x['close_shift'] else 0, axis=1)

    avg_gain = df['gains'].mean()
    avg_losses = df['loss'].mean()

    return avg_gain / avg_losses

def fetch_fmp_data(symbol, api_key, start_date, end_date):
    url = f'https://financialmodelingprep.com/api/v3/historical-price-full/{symbol}?apikey={api_key}'
    response = requests.get(url)
    data = response.json()
    if 'historical' in data:
        df = pd.DataFrame(data['historical'])
        df['date'] = pd.to_datetime(df['date'])
        df.set_index('date', inplace=True)
        df = df.sort_index()
        df = df[(df.index >= start_date) & (df.index <= end_date)]  # Filter data by date range
        df = df.rename(columns={'close': 'adj_close'})
        return df
    else:
        raise ValueError(f"Error fetching data for {symbol} from FMP")

def get_stock(stock, days=365):
    start_date, end_date = period(days)
    try:
        df = fetch_fmp_data(stock, api_key, start_date, end_date)
        df = df.drop(['high', 'low', 'open', 'volume'], axis=1)
    except:
        return False
    if len(df) < 2:
        print('Less than 2')
        return False
    return df

def rs_rating(stock_rs_strange_value, index_rs_strange_value):
    return 100 * (stock_rs_strange_value / index_rs_strange_value)

class Moving_avg:
    def __init__(self, stockname, df, index_strange, min_rs_rating=70):
        self.stockname = stockname
        self.df = df
        self.df = self.calc_moving_avg(self.df)
        self.price = self.df['adj_close'][-1]
        self.sma50 = self.df["SMA_50"][-1]
        self.sma150 = self.df["SMA_150"][-1]
        self.sma200 = self.df["SMA_200"][-1]
        self.index_rs_strange = index_strange
        self.stock_rs_strange = calc_relative_strength(self.df)
        self.rs_rating = rs_rating(self.stock_rs_strange, self.index_rs_strange)
        self.min_rs_rating = min_rs_rating
        self.low_of_52week = self.df["adj_close"][-260:].min()
        self.high_of_52week = self.df["adj_close"][-260:].max()

        try:
            self.sma200_20 = df["SMA_200"][-20]
        except:
            self.sma200_20 = 0

    def as_dict(self):
        return OrderedDict([
            ('Company Name', self.stockname),
            ('Ticker', self.stockname),
            ('Current Price', self.price),
            ('RS Rating', self.rs_rating),
            ('SMA 50 Day', self.sma50),
            ('SMA 150 Day', self.sma150),
            ('SMA 200 Day', self.sma200),
            ('52 Week Low', self.low_of_52week),
            ('52 Week High', self.high_of_52week),
        ])

    def calc_moving_avg(self, df):
        for x in [50, 150, 200]:
            df["SMA_" + str(x)] = round(df['adj_close'].rolling(window=x).mean(), 2)
        return df

    def avg_volume(self):
        return self.df['volume'].mean()

    def condition1(self):
        if (self.price > self.sma150 and self.price > self.sma200):
            return True

    def condition2(self):
        if (self.sma150 > self.sma200):
            return True

    def condition3(self):
        if self.sma200 > self.sma200_20:
            return True

    def condition4(self):
        if self.sma50 > self.sma150 > self.sma200:
            return True

    def condition5(self):
        if self.price > self.sma50:
            return True

    def condition6(self):
        if self.price >= (1.3 * self.low_of_52week):
            return True

    def condition7(self):
        if self.price >= (0.75 * self.high_of_52week):
            return True

    def condition8(self):
        if self.rs_rating >= self.min_rs_rating:
            return True

    def all_conditions(self):
        if all([
            self.condition1(),
            self.condition2(),
            self.condition3(),
            self.condition4(),
            self.condition5(),
            self.condition6(),
            self.condition7(),
            self.condition8()
        ]):
            return True

def filedownload(df):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="MM_stock_screener.csv">Download CSV File</a>'
    return href

def stock_screener(index_ticker_name='S&P500', min_vol=5e6, min_price=0, days=365, min_rs_rating=70):
    start_date, end_date = period(days)

    index_ticker = {
        'DOW': 'DOW',
        'NASDAQ': '^IXIC',
        "S&P500": '^GSPC'
    }

    index_list = {
        'DOW': si.tickers_dow(),
        'NASDAQ': si.tickers_nasdaq(),
        "S&P500": si.tickers_sp500()
    }

    st.header(f'Stock Screener {index_ticker_name}')
    stocklist = index_list.get(index_ticker_name)[:]

    index_rs_strange_value = calc_relative_strength(
        get_stock(
            index_ticker[index_ticker_name], days
        )
    )

    final = []
    latest_iteration = st.empty()
    having_break = st.empty()
    bar = st.progress(0)
    total = len(stocklist)

    for num, stock_name in enumerate(stocklist):
        print(f"checking {num}:{stock_name}")
        df = get_stock(stock_name)
        if df is False:
            print(f'SKIPPED to download {stock_name} {num}')
            continue

        stock_meta = Moving_avg(stock_name, df, index_rs_strange_value, min_rs_rating)
        time.sleep(0.2)

        if stock_meta.all_conditions():
            print(f'Passed conditions: {stock_name}')
            final.append(stock_meta.as_dict())
        else:
            print(f'Failed conditions: {stock_name}')

        latest_iteration.text(f'Stocks Processed: {(num+1)}/{total}')
        bar.progress((num+1)/total)

        if num == 0:
            continue
        if num % 10 == 0:
            for i in list(range(5))[::-1]:
                having_break.text(f'waiting for {i}sec')
                time.sleep(1)
        if num % 100 == 0:
            for i in list(range(3))[::-1]:
                having_break.text(f'waiting for {i}min')
                time.sleep(60)

    final_df = pd.DataFrame(final)
    return final_df

#### ---- The App ---- ####
st.sidebar.header('Settings')
index_ticker = st.sidebar.selectbox('Index', ['S&P500', 'DOW', 'NASDAQ'])
min_volume = st.sidebar.text_input("Minimum Volume", 1e6)
min_price = st.sidebar.slider('Minimum Price ($)', 0, 5000, 0)
days = st.sidebar.slider('Max Period (days)', 14, 730, 365)
min_rs_rating = st.sidebar.slider('Minimum Relative Strength Rating', 1, 100, 70)

with st.container():
    st.title('Mark Minervini’s Trend stock screener')
    st.write('''
        I've created this app to help screen for stocks using Mark Minervini's 8 principles.
        You can read more about this template in Mark Minervini’s [blog post](http://www.minervini.com/blog/index.php/blog/first_things_first_how_to_chart_stocks_correctly_and_increase_your_chances).
    ''')
    expander = st.expander("Principles")
    expander.write('''
        1. The current price of the security must be greater than the 150 and 200-day simple moving averages.
        2. The 150-day simple moving average must be greater than the 200-day simple moving average.
        3. The 200-day simple moving average must be trending up for at least 1 month.
        4. The 50-day simple moving average must be greater than the 150 simple moving average and the 200 simple moving average.
        5. The current price must be greater than the 50-day simple moving average.
        6. The current price must be at least 30% above the 52 week low.
        7. The current price must be within 25% of the 52 week high.
        8. The IBD RS-Rating must be greater than 70 (the higher, the better).
    ''')

    if st.button('Start screening'):
        final_df = stock_screener(index_ticker, min_volume, min_price, days, min_rs_rating)
        st.dataframe(final_df)
        st.markdown(filedownload(final_df), unsafe_allow_html=True)
        st.set_option('deprecation.showPyplotGlobalUse', False)
